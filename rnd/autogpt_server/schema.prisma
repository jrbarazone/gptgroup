datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
  interface            = "asyncio"
}

// This model describes the Agent Graph/Flow (Multi Agent System).
model AgentGraph {
  id          String  @id
  name        String?
  description String?

  AgentNodes AgentNode[] @relation("AgentGraphNodes")
}

// This model describes a single node in the Agent Graph/Flow (Multi Agent System).
model AgentNode {
  id String @id

  agentBlockName String
  AgentBlock     AgentBlock @relation(fields: [agentBlockName], references: [name])

  agentGraphId String
  AgentGraph   AgentGraph @relation("AgentGraphNodes", fields: [agentGraphId], references: [id])

  // List of consumed input, that the parent node should provide.
  Input AgentNodeLink[] @relation("AgentNodeInput")

  // List of produced output, that the child node should be executed.
  Output AgentNodeLink[] @relation("AgentNodeOutput")

  // JSON serialized dict[str, str] containing predefined input values.
  constantInput String @default("{}")

  ExecutionHistory AgentNodeExecution[]
}

// This model describes the link between two AgentNodes.
model AgentNodeLink {
  id String @id

  agentNodeInputId String
  AgentNodeInput   AgentNode @relation("AgentNodeOutput", fields: [agentNodeInputId], references: [id]) // Output of the node is the input of the link.
  inputName        String

  agentNodeOutputId String
  AgentNodeOutput   AgentNode @relation("AgentNodeInput", fields: [agentNodeOutputId], references: [id]) // Input of the node is the output of the link.
  outputName        String
}

// This model describes a component that will be executed by the AgentNode.
model AgentBlock {
  name String @id

  // We allow a block to have multiple types of input & output.
  // JSON serialized dict[str, str], key: input/output name, value: data type.
  inputSchema  String
  outputSchema String

  // Prisma requires explicit back-references.
  ReferencedByAgentNode AgentNode[]
}

// This model describes the execution of an AgentNode.
model AgentNodeExecution {
  id          String @id
  executionId String

  agentNodeId String
  AgentNode   AgentNode @relation(fields: [agentNodeId], references: [id])

  inputData   String?
  inputFiles  FileDefinition[] @relation("InputFiles")
  outputName  String?
  outputData  String?
  outputFiles FileDefinition[] @relation("OutputFiles")

  // sqlite does not support enum
  // enum Status { QUEUED, RUNNING, SUCCESS, FAILED }
  executionStatus String
  creationTime    DateTime
  startTime       DateTime?
  endTime         DateTime?
}

// This model describes a file that can be used as input/output of an AgentNodeExecution.
model FileDefinition {
  id       String  @id
  path     String
  metadata String? // JSON serialized object
  mimeType String?
  size     Int?
  hash     String?
  encoding String?

  // Prisma requires explicit back-references.
  ReferencedByInputFiles  AgentNodeExecution[] @relation("InputFiles")
  ReferencedByOutputFiles AgentNodeExecution[] @relation("OutputFiles")
}
